{
	"info": {
		"_postman_id": "a10b7d34-1593-4fe9-af4e-cb40b215d754",
		"name": "HM_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21444059"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"String in body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json (полученное).\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let res_name = jsonData.name\r",
							"let res_age = jsonData.age\r",
							"let res_family = jsonData.family\r",
							"let res_salary = jsonData.salary\r",
							"let res_u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"// Спарсить request (отправленное).\r",
							"let req = request.data\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_family = req.family\r",
							"let req_salary = req.salary\r",
							"let req_u_salary_1_5_year = req.salary * 4\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"equality of req_name and res_name\", function () {\r",
							"    pm.expect(res_name).to.eql('Dimka');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"equality of req_age and res_age\", function () {\r",
							"    pm.expect(res_age).to.eql('28');\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"equality of req_salary and res_salary\", function () {\r",
							"    pm.expect(res_salary).to.eql(12000);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"equality of req_name and res_name\", function () {\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"equality of req_age and res_age\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"equality of req_salary and res_salary\", function () {\r",
							"    pm.expect(res_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log('response family - ', res_family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"equality of req_u_salary_1_5_year and res_u_salary_1_5_year\", function () {\r",
							"    pm.expect(res_u_salary_1_5_year).to.eql(req_u_salary_1_5_year);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json (полученное).\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let res_name = jsonData.name\r",
							"let res_age = jsonData.age\r",
							"let res_salary = jsonData.salary\r",
							"let res_family = jsonData.family\r",
							"let res_dog = jsonData.family.pets.dog\r",
							"let res_name_dog = jsonData.family.pets.dog.name\r",
							"let res_age_dog = jsonData.family.pets.dog.age\r",
							"\r",
							"// Спарсить request (отправленное).\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"equality of req_name and res_name\", function () {\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"equality of req_age and res_age\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"equality of req_salary and res_salary\", function () {\r",
							"    pm.expect(res_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log('response family - ', res_family)\r",
							"\r",
							"console.log(res_dog)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has name\", function () {\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include('name');\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog has age\", function () {\r",
							"    pm.expect(JSON.stringify(res_dog)).to.include('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"'Luky' in dog's name\", function () {\r",
							"    pm.expect(JSON.stringify(res_name_dog)).to.include('Luky');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"4 in dog's age\", function () {\r",
							"    pm.expect(JSON.stringify(res_age_dog)).to.include(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json (полученное).\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let res_name = jsonData.name\r",
							"let res_age = jsonData.age\r",
							"let res_salary = jsonData.salary\r",
							"\r",
							"\r",
							"// Спарсить request (отправленное).\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"equality of req_name and res_name\", function () {\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"equality of req_age and res_age\", function () {\r",
							"    pm.expect(res_age).to.eql(Number(req_age));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req_salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(res_salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(res_salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(res_salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(res_salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"equality of req_salary and res_salary_0\", function () {\r",
							"    pm.expect(res_salary[0]).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"equality of req_salary * 2 and res_salary_1\", function () {\r",
							"    pm.expect(res_salary[1]).to.eql(String(Number(req_salary) * 2));\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"equality of req_salary * 3 and res_salary_2\", function () {\r",
							"    pm.expect(res_salary[2]).to.eql(String(Number(req_salary) * 3));\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"// Передать в окружение переменную age\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set('name', req.name);\r",
							"pm.environment.set('age', req.age);\r",
							"pm.environment.set('salary', req.salary);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"res_salary.forEach((item) => {console.log(item)})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let res_salary = jsonData.start_qa_salary\r",
							"let res_6_salary = jsonData.qa_salary_after_6_months\r",
							"let res_12_salary = jsonData.qa_salary_after_12_months\r",
							"let res_3_5_salary = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"let res_1_5_salary = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"// Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"let req_salary = Number(req.salary)\r",
							"let req_age = Number(req.age)\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('start_qa_salary');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"person including\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include('person');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"equality of start_qa_salary and salary\", function () {\r",
							"    pm.expect(res_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"equality of qa_salary_after_6_months and salary*2\", function () {\r",
							"    pm.expect(res_6_salary).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"equality of qa_salary_after_12_months and salary*2.7\", function () {\r",
							"    pm.expect(res_12_salary).to.eql(req_salary * 2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"equality of qa_salary_after_1.5_year and salary*3.3\", function () {\r",
							"    pm.expect(res_1_5_salary).to.eql(req_salary * 3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"equality of qa_salary_after_3.5_years and salary*3.8\", function () {\r",
							"    pm.expect(res_3_5_salary).to.eql(req_salary * 3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"equality of u_name[1] and salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"equality of u_age and age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"equality of u_salary_5_years and salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person)\r",
							"console.log(jsonData.person[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "1*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"\r",
							"// Требования:\r",
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"// 1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"\r",
							"let name = pm.iterationData.get('name')\r",
							"let age = pm.iterationData.get('age')\r",
							"let salary = pm.iterationData.get('salary')\r",
							"\r",
							"function nameValid(value) {\r",
							"    return value && value.length>2 && value.length<41 && value.trim() == value\r",
							"}\r",
							"\r",
							"function ageValid(value) {\r",
							"    return value && !isNaN(value) && value>17 && value<121 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function salaryValid(value) {\r",
							"    return value && !isNaN(value) && value>0 && value<1000001 && Number.isInteger(+value)\r",
							"}\r",
							"\r",
							"function validAll(name, age, salary){\r",
							"    return nameValid(name) && ageValid(age) && salaryValid(salary)\r",
							"}\r",
							"\r",
							"if(validAll(name, age, salary)) {\r",
							"    pm.test(`Code 200, where name = ${name}, age = ${age}, salary = ${salary}`, () => {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"} else {\r",
							"    pm.test(`Code NO 200, where name = ${name}, age = ${age}, salary = ${salary}`, () => {\r",
							"        pm.response.to.not.have.status(200)\r",
							"    })\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let res_salary = pm.response.json().salary;\r",
							"let req_salary = pm.request.url.query.get('salary');\r",
							"\r",
							"res_salary.forEach((salary, index) => {\r",
							"    pm.test(`${req_salary} * ${index+1} = ${salary}`, () => {\r",
							"        pm.expect(req_salary*(index+1)).to.eql(+salary)\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age={{age}}&name={{name}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"let jsonData = {\r",
							"    age: String(pm.response.json().age),\r",
							"    name: pm.response.json().name,\r",
							"    salary: String(pm.response.json().salary)\r",
							"}\r",
							"\r",
							"pm.test('equality of objects', () => {\r",
							"    pm.expect(req).to.deep.eql(jsonData)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let salary = pm.environment.get('salary')\r",
							"let count = {\r",
							"    'start_qa_salary': 1,\r",
							"    'qa_salary_after_6_months': 2,\r",
							"    'qa_salary_after_12_months': 2.7,\r",
							"    'qa_salary_after_1.5_year': 3.3,\r",
							"    'qa_salary_after_3.5_years': 3.8,\r",
							"    'person': ''\r",
							"}\r",
							"\r",
							"for(let key in count) {\r",
							"    pm.test(`${key} in response, done`, () => {\r",
							"        pm.expect(jsonData).to.have.property(key)\r",
							"    })\r",
							"    if(key != 'person') {\r",
							"        pm.test(`resp ${key} = req salary * ${count[key]}`, () => {\r",
							"        pm.expect(+jsonData[key]).to.eql(salary * count[key])\r",
							"    })\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}